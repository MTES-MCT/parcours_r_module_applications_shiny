[["index.html", "Développement dune application Shiny sur lartificialisation Introduction 0.1 Le parcours de formation 0.2 Objectifs de ce module", " Développement dune application Shiny sur lartificialisation Mathieu Rajerison 2022-02-16 Introduction Crédit photographique Pascal Boulin 0.1 Le parcours de formation Ce dispositif de formation vise à faire monter en compétence les agents du MTES (Ministère de la transition écologique et solidaire) et du MCT (Ministère de la cohésion des territoires) dans le domaine de la science de la donnée avec le logiciel R. Il est conçu pour être déployé à léchelle nationale par le réseau des CVRH (Centre de Valorisation des Ressources Humaines). Le parcours proposé est structuré en modules de 2 jours chacun. Les deux premiers (ou un niveau équivalent) sont des pré-requis pour suivre les suivants qui sont proposés à la carte : Socle : Premier programme en R Socle : Préparation des données Statistiques descriptives Analyses multivariées Datavisualisation : Produire des graphiques, des cartes et des tableaux Documents reproductibles avec RMarkdown (2ème trimestre 2020) Analyse spatiale Applications Shiny La mise à disposition des supports de formation se fait désormais par la page daccueil du parcours de formation. Ces supports sont en licence ouverte. Si vous souhaitez accéder aux sources ou aux données mobilisées pendant les formations, il faut directement les télécharger depuis le Github du ministère. Pour vous tenir au courant de loffre de formation proposée par le réseau des CVRH, consultez la plateforme OUPS (un accès intranet MTES-MCT est nécessaire). Vous pouvez vous y abonner pour recevoir les annonces de formation qui vous intéressent. Il existe une liste pour échanger de linformation, discuter autour de R ou encore faire part de difficultés pour trouver ensemble les solutions. Pour sinsrire, envoyer un message vide avec le titre subscribe labo.communaute-r à ladresse sympa@developpement-durable.gouv.fr. 0.2 Objectifs de ce module Lobjectif de ce module est de présenter le développement dune application Shiny autour de lartificialisation. Dans un premier temps, nous préparerons les éléments nécessaires au développement de lapplication Shiny et nous assurerons ainsi de la maîtrise des bases. Par la suite, nous implémenterons les éléments préparés au sein dune application Shiny. Nous verrons dans cette dernière phase, la plus importante : Larchitecture dune application Shiny Différents éléments dinterface (UI ou User Interface) Différents modes dinteraction avec les données Différentes façons de visualiser la donnée Les librairies suivantes seront nécessaires : "],["quelques-datavisualisations.html", "Chapitre 1 Quelques datavisualisations 1.1 La carte du choléra de John Snow 1.2 La correspondance de Stefanie Posavec et Giorgia Lupi 1.3 Le suivi de lépidémie en ligne de Guillaume Rozier 1.4 Le Data-Driven DJ de Brian Foo 1.5 Quelques théories et théoriciens 1.6 Leland Wilkinson 1.7 Edward Tufte 1.8 Des outils pour visualiser 1.9 Des dataviz Cerema faites sous Shiny", " Chapitre 1 Quelques datavisualisations 1.1 La carte du choléra de John Snow Voir 1.1.1 Charles Joseph Minard Voir 1.2 La correspondance de Stefanie Posavec et Giorgia Lupi Dar data 1.3 Le suivi de lépidémie en ligne de Guillaume Rozier Covid-tracker 1.4 Le Data-Driven DJ de Brian Foo Voir 1.5 Quelques théories et théoriciens 1.5.1 Jacques Bertin 1.6 Leland Wilkinson 1.7 Edward Tufte 1.8 Des outils pour visualiser 1.8.1 Outils bureau Tableau ESRI Dashboards MViewer  1.8.2 Python dash plotly matplotlib seaborn bokeh  1.8.3 R Shiny ggplot Rgl  1.8.4 Javascript leaflet D3 &amp; ObservableHQ svelte kepler Charts.js  1.9 Des dataviz Cerema faites sous Shiny 1.9.1 trafic covid https://dataviz.cerema.fr/trafic-routier 1.9.2 Cartofriches https://cartofriches.cerema.fr/ !! Mettre appli ODD Sylvain Loze "],["lecture-des-données-de-flux.html", "Chapitre 2 Lecture des données de flux 2.1 Téléchargement de la donnée 2.2 Chargement des librairies 2.3 Lecture de la donnée 2.4 Contrôle 2.5 Relecture du fichier", " Chapitre 2 Lecture des données de flux Dans ces notebooks, nous nous intéresserons aux flux dartificialisation vers différents postes : habitat, activité, au fil des ans, sur la période 2009 à 2020. Ces différents notebooks visent à poser les bases dune application Shiny dexploration de ces données. 2.1 Téléchargement de la donnée Le fichier à télécharger sappelle obs_artif_conso_com_2009_2020_V2.csv et se situe à ladresse https://cerema.app.box.com/v/pnb-action7-indicateurs-ff/folder/149684581362 On le télécharge dans le dossier data de notre répertoire de travail. 2.2 Chargement des librairies Chargeons la fameuse librairie couteau suisse tidyverse. Celle-ci contient des librairies essentielles telles que dplyr, magrittr (pour les pipes %&gt;%), library(tidyverse) 2.3 Lecture de la donnée Lisons nos données : flux &lt;- read_csv(&quot;data/obs_artif_conso_com_2009_2020_V2.csv&quot;) glimpse(flux) Rows: 34,938 Columns: 85 $ idcom &lt;chr&gt; &quot;01001&quot;, &quot;01002&quot;, &quot;01004&quot;, &quot;01005&quot;, &quot;01006&quot;, &quot;01007&quot;, &quot;010~ $ idcomtxt &lt;chr&gt; &quot;L&#39;Abergement-Clémenciat&quot;, &quot;L&#39;Abergement-de-Varey&quot;, &quot;Ambér~ $ idreg &lt;chr&gt; &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;~ $ idregtxt &lt;chr&gt; &quot;Auvergne-Rhône-Alpes&quot;, &quot;Auvergne-Rhône-Alpes&quot;, &quot;Auvergne-~ $ iddep &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;~ $ iddeptxt &lt;chr&gt; &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;A~ $ epci20 &lt;dbl&gt; 200069193, 240100883, 240100883, 200042497, 200040350, 240~ $ epci20txt &lt;chr&gt; &quot;CC de la Dombes&quot;, &quot;CC de la Plaine de l&#39;Ain&quot;, &quot;CC de la P~ $ aav2020 &lt;chr&gt; &quot;524&quot;, &quot;000&quot;, &quot;243&quot;, &quot;002&quot;, &quot;286&quot;, &quot;243&quot;, &quot;243&quot;, &quot;286&quot;, &quot;0~ $ libaav2020 &lt;chr&gt; &quot;Châtillon-sur-Chalaronne&quot;, &quot;Commune hors attraction des v~ $ cateaav2020 &lt;dbl&gt; 20, 30, 11, 20, 20, 20, 20, 20, 30, 20, 20, 20, 20, 20, 20~ $ naf09art10 &lt;dbl&gt; 8324, 1139, 79035, 6205, 0, 19333, 1337, 676, 17093, 1893,~ $ art09act10 &lt;dbl&gt; 0, 0, 48339, 0, 0, 1783, 0, 0, 0, 0, 0, 0, 4813, 0, 0, 0, ~ $ art09hab10 &lt;dbl&gt; 8324, 1139, 29034, 6152, 0, 14707, 1337, 676, 10834, 1533,~ $ art09mix10 &lt;dbl&gt; 0, 0, 1662, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art09inc10 &lt;dbl&gt; 0, 0, 0, 0, 0, 2843, 0, 0, 6259, 360, 0, 0, 10, 250, 0, 2,~ $ naf10art11 &lt;dbl&gt; 8324, 1140, 79035, 6205, 0, 19334, 1338, 676, 17094, 1894,~ $ art10act11 &lt;dbl&gt; 0, 0, 48339, 0, 0, 1784, 0, 0, 0, 0, 0, 0, 4813, 0, 0, 0, ~ $ art10hab11 &lt;dbl&gt; 8324, 1140, 29034, 6152, 0, 14708, 1338, 676, 10834, 1534,~ $ art10mix11 &lt;dbl&gt; 0, 0, 1662, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art10inc11 &lt;dbl&gt; 0, 0, 0, 0, 0, 2842, 0, 0, 6260, 360, 0, 0, 10, 249, 0, 2,~ $ naf11art12 &lt;dbl&gt; 0, 4638, 30959, 9185, 98, 10161, 3045, 1088, 22509, 1208, ~ $ art11act12 &lt;dbl&gt; 0, 0, 5957, 0, 0, 0, 1419, 0, 14380, 0, 0, 0, 21760, 640, ~ $ art11hab12 &lt;dbl&gt; 0, 258, 12752, 9029, 98, 10161, 1500, 1088, 8129, 1208, 0,~ $ art11mix12 &lt;dbl&gt; 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16605~ $ art11inc12 &lt;dbl&gt; 0, 4380, 12250, 50, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ naf12art13 &lt;dbl&gt; 650, 977, 14426, 2799, 0, 4418, 1847, 1314, 7824, 3992, 40~ $ art12act13 &lt;dbl&gt; 0, 0, 5200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art12hab13 &lt;dbl&gt; 650, 977, 9226, 1975, 0, 4418, 1847, 1314, 7824, 3992, 161~ $ art12mix13 &lt;dbl&gt; 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14~ $ art12inc13 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2402, 0, 0, 0, 0, 0, 0, 0, 0~ $ naf13art14 &lt;dbl&gt; 8037, 0, 14873, 0, 0, 11208, 1218, 3418, 8014, 0, 0, 0, 14~ $ art13act14 &lt;dbl&gt; 0, 0, 4410, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art13hab14 &lt;dbl&gt; 8037, 0, 10108, 0, 0, 10194, 1218, 3418, 8014, 0, 0, 0, 14~ $ art13mix14 &lt;dbl&gt; 0, 0, 354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ art13inc14 &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 0, 1226~ $ naf14art15 &lt;dbl&gt; 0, 975, 29188, 0, 0, 24511, 226, 3065, 0, 0, 7984, 0, 1109~ $ art14act15 &lt;dbl&gt; 0, 0, 691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, ~ $ art14hab15 &lt;dbl&gt; 0, 975, 28497, 0, 0, 24511, 226, 3065, 0, 0, 7598, 0, 1093~ $ art14mix15 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art14inc15 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0, 0, 0, 0, 0, 0, 0,~ $ naf15art16 &lt;dbl&gt; 857, 1749, 94624, 886, 1450, 14000, 2862, 6847, 1317, 0, 1~ $ art15act16 &lt;dbl&gt; 0, 0, 34171, 0, 0, 11601, 0, 0, 0, 0, 0, 0, 80043, 0, 0, 0~ $ art15hab16 &lt;dbl&gt; 857, 1749, 60300, 0, 1450, 2399, 2862, 6847, 1317, 0, 1449~ $ art15mix16 &lt;dbl&gt; 0, 0, 152, 886, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0, 0~ $ art15inc16 &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0~ $ naf16art17 &lt;dbl&gt; 1718, 1205, 45103, 16323, 0, 27673, 8959, 0, 3363, 2090, 0~ $ art16act17 &lt;dbl&gt; 0, 0, 1069, 0, 0, 13351, 0, 0, 0, 0, 0, 0, 1505, 0, 0, 0, ~ $ art16hab17 &lt;dbl&gt; 1718, 1205, 44034, 13831, 0, 12816, 8959, 0, 3363, 2090, 0~ $ art16mix17 &lt;dbl&gt; 0, 0, 0, 2492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art16inc17 &lt;dbl&gt; 0, 0, 0, 0, 0, 1506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ naf17art18 &lt;dbl&gt; 3580, 0, 76493, 3729, 1000, 12508, 1338, 2265, 978, 1781, ~ $ art17act18 &lt;dbl&gt; 0, 0, 36327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art17hab18 &lt;dbl&gt; 3580, 0, 40166, 3729, 1000, 12508, 1338, 2265, 978, 1781, ~ $ art17mix18 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art17inc18 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5647, 0, 0, 0, 0, 0, 0, 0, 0~ $ naf18art19 &lt;dbl&gt; 2721, 1037, 87831, 0, 3959, 19203, 2550, 1000, 700, 0, 0, ~ $ art18act19 &lt;dbl&gt; 0, 0, 34134, 0, 0, 5757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art18hab19 &lt;dbl&gt; 2721, 600, 53272, 0, 3959, 13446, 2550, 1000, 700, 0, 0, 0~ $ art18mix19 &lt;dbl&gt; 0, 0, 425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ art18inc19 &lt;dbl&gt; 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ naf19art20 &lt;dbl&gt; 0, 1740, 13093, 25621, 0, 22992, 9419, 2020, 1707, 0, 4830~ $ art19act20 &lt;dbl&gt; 0, 0, 4907, 0, 0, 18782, 0, 0, 0, 0, 0, 0, 0, 0, 1850, 0, ~ $ art19hab20 &lt;dbl&gt; 0, 1740, 8157, 25621, 0, 4210, 9419, 2020, 1707, 0, 4830, ~ $ art19mix20 &lt;dbl&gt; 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art19inc20 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ nafart0920 &lt;dbl&gt; 34211, 14600, 564660, 70953, 6507, 185341, 34139, 22369, 8~ $ artact0920 &lt;dbl&gt; 0, 0, 223544, 0, 0, 54072, 1419, 0, 14380, 0, 0, 0, 113098~ $ arthab0920 &lt;dbl&gt; 34211, 9783, 324580, 66489, 6507, 124078, 32594, 22369, 53~ $ artmix0920 &lt;dbl&gt; 0, 0, 4284, 4414, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0,~ $ artinc0920 &lt;dbl&gt; 0, 4817, 12252, 50, 0, 7191, 126, 0, 12519, 720, 8435, 0, ~ $ artcom0920 &lt;chr&gt; &quot;0.22&quot;, &quot;0.16&quot;, &quot;2.31&quot;, &quot;0.44&quot;, &quot;0.11&quot;, &quot;0.55&quot;, &quot;0.66&quot;, &quot;0~ $ pop12 &lt;dbl&gt; 777, 235, 14233, 1642, 110, 2437, 739, 338, 1069, 385, 311~ $ pop17 &lt;dbl&gt; 776, 248, 14035, 1689, 111, 2726, 752, 330, 1115, 376, 326~ $ pop1217 &lt;dbl&gt; -1, 13, -198, 47, 1, 289, 13, -8, 46, -9, 15, -16, -73, 23~ $ men12 &lt;dbl&gt; 303, 104, 6013, 614, 51, 979, 306, 140, 428, 148, 140, 68,~ $ men17 &lt;dbl&gt; 315, 107, 6406, 636, 56, 1144, 324, 148, 475, 155, 150, 65~ $ men1217 &lt;dbl&gt; 12, 3, 393, 22, 4, 164, 18, 7, 47, 7, 10, -3, 33, 21, 15, ~ $ emp17 &lt;dbl&gt; 99, 16, 7686, 294, 6, 469, 145, 19, 267, 25, 57, 21, 2136,~ $ emp12 &lt;dbl&gt; 75, 13, 7613, 281, 4, 454, 135, 32, 199, 35, 48, 21, 2134,~ $ emp1217 &lt;dbl&gt; 24, 3, 73, 13, 2, 15, 10, -13, 68, -10, 9, 0, 2, -7, 8, 2,~ $ mepart1217 &lt;dbl&gt; 31.97, 12.23, 23.51, 17.49, 41.38, 21.88, 18.53, -4.10, 56~ $ menhab1217 &lt;dbl&gt; 10.66, 6.11, 25.83, 13.92, 27.59, 30.18, 11.91, 4.78, 22.9~ $ artpop1217 &lt;chr&gt; &quot;-11262&quot;, &quot;377.38&quot;, &quot;-1001.08&quot;, &quot;425.7&quot;, &quot;1450&quot;, &quot;283.08&quot;,~ $ surfcom20 &lt;chr&gt; &quot;15654745&quot;, &quot;9129931&quot;, &quot;24488600&quot;, &quot;16050565&quot;, &quot;6026477&quot;, ~ 2.4 Contrôle Un petit souci : certaines colonnes sont de type caractères, alors quelles devraient être de type numérique. Cest le cas de surfcom20, par exemple. class(flux$surfcom20) [1] &quot;character&quot; Listons les colonnes de type caractères : sapply(names(flux), function(x) class(flux[[x]]) == &quot;character&quot;) %&gt;% which %&gt;% {names(flux)[.]} [1] &quot;idcom&quot; &quot;idcomtxt&quot; &quot;idreg&quot; &quot;idregtxt&quot; &quot;iddep&quot; [6] &quot;iddeptxt&quot; &quot;epci20txt&quot; &quot;aav2020&quot; &quot;libaav2020&quot; &quot;artcom0920&quot; [11] &quot;artpop1217&quot; &quot;surfcom20&quot; Les colonnes artcom0920, artpop1217 et surfcom20 devraient être de type numérique. Recherchons les valeurs non numériques dans ces colonnes : w &lt;- grep(&quot;^(-|[0-9]|\\\\.)*$&quot;, flux$artcom0920, perl = TRUE) flux$artcom0920[-w] %&gt;% unique [1] &quot;NULL&quot; w &lt;- grep(&quot;^(-|[0-9]|\\\\.)*$&quot;, flux$artpop1217, perl = TRUE) flux$artpop1217[-w] %&gt;% unique [1] &quot;NULL&quot; w &lt;- grep(&quot;^(-|[0-9]|\\\\.)*$&quot;, flux$surfcom20, perl = TRUE) flux$surfcom20[-w] %&gt;% unique [1] &quot;NULL&quot; Il sagit des valeurs NULL. Quels sont les départements pour lesquels on a cette valeur (et donc pour lesquels on na pas de surface) ? flux$iddep[-w] [1] &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; [13] &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; [25] &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;971&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; [37] &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; [49] &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; [61] &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;972&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; [73] &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; [85] &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;973&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; [97] &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; [109] &quot;974&quot; &quot;974&quot; &quot;974&quot; &quot;974&quot; Il sagit des départemments dOutre-Mer. 2.5 Relecture du fichier Nous pouvons relire le fichier en mentionnant cette NULL comme étant NA flux &lt;- read_csv(&quot;data/obs_artif_conso_com_2009_2020_V2.csv&quot;, na = c(&quot;&quot;, &quot;NULL&quot;)) glimpse(flux) Rows: 34,938 Columns: 85 $ idcom &lt;chr&gt; &quot;01001&quot;, &quot;01002&quot;, &quot;01004&quot;, &quot;01005&quot;, &quot;01006&quot;, &quot;01007&quot;, &quot;010~ $ idcomtxt &lt;chr&gt; &quot;L&#39;Abergement-Clémenciat&quot;, &quot;L&#39;Abergement-de-Varey&quot;, &quot;Ambér~ $ idreg &lt;chr&gt; &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;, &quot;84&quot;~ $ idregtxt &lt;chr&gt; &quot;Auvergne-Rhône-Alpes&quot;, &quot;Auvergne-Rhône-Alpes&quot;, &quot;Auvergne-~ $ iddep &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;~ $ iddeptxt &lt;chr&gt; &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;Ain&quot;, &quot;A~ $ epci20 &lt;dbl&gt; 200069193, 240100883, 240100883, 200042497, 200040350, 240~ $ epci20txt &lt;chr&gt; &quot;CC de la Dombes&quot;, &quot;CC de la Plaine de l&#39;Ain&quot;, &quot;CC de la P~ $ aav2020 &lt;chr&gt; &quot;524&quot;, &quot;000&quot;, &quot;243&quot;, &quot;002&quot;, &quot;286&quot;, &quot;243&quot;, &quot;243&quot;, &quot;286&quot;, &quot;0~ $ libaav2020 &lt;chr&gt; &quot;Châtillon-sur-Chalaronne&quot;, &quot;Commune hors attraction des v~ $ cateaav2020 &lt;dbl&gt; 20, 30, 11, 20, 20, 20, 20, 20, 30, 20, 20, 20, 20, 20, 20~ $ naf09art10 &lt;dbl&gt; 8324, 1139, 79035, 6205, 0, 19333, 1337, 676, 17093, 1893,~ $ art09act10 &lt;dbl&gt; 0, 0, 48339, 0, 0, 1783, 0, 0, 0, 0, 0, 0, 4813, 0, 0, 0, ~ $ art09hab10 &lt;dbl&gt; 8324, 1139, 29034, 6152, 0, 14707, 1337, 676, 10834, 1533,~ $ art09mix10 &lt;dbl&gt; 0, 0, 1662, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art09inc10 &lt;dbl&gt; 0, 0, 0, 0, 0, 2843, 0, 0, 6259, 360, 0, 0, 10, 250, 0, 2,~ $ naf10art11 &lt;dbl&gt; 8324, 1140, 79035, 6205, 0, 19334, 1338, 676, 17094, 1894,~ $ art10act11 &lt;dbl&gt; 0, 0, 48339, 0, 0, 1784, 0, 0, 0, 0, 0, 0, 4813, 0, 0, 0, ~ $ art10hab11 &lt;dbl&gt; 8324, 1140, 29034, 6152, 0, 14708, 1338, 676, 10834, 1534,~ $ art10mix11 &lt;dbl&gt; 0, 0, 1662, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art10inc11 &lt;dbl&gt; 0, 0, 0, 0, 0, 2842, 0, 0, 6260, 360, 0, 0, 10, 249, 0, 2,~ $ naf11art12 &lt;dbl&gt; 0, 4638, 30959, 9185, 98, 10161, 3045, 1088, 22509, 1208, ~ $ art11act12 &lt;dbl&gt; 0, 0, 5957, 0, 0, 0, 1419, 0, 14380, 0, 0, 0, 21760, 640, ~ $ art11hab12 &lt;dbl&gt; 0, 258, 12752, 9029, 98, 10161, 1500, 1088, 8129, 1208, 0,~ $ art11mix12 &lt;dbl&gt; 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16605~ $ art11inc12 &lt;dbl&gt; 0, 4380, 12250, 50, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ naf12art13 &lt;dbl&gt; 650, 977, 14426, 2799, 0, 4418, 1847, 1314, 7824, 3992, 40~ $ art12act13 &lt;dbl&gt; 0, 0, 5200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art12hab13 &lt;dbl&gt; 650, 977, 9226, 1975, 0, 4418, 1847, 1314, 7824, 3992, 161~ $ art12mix13 &lt;dbl&gt; 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14~ $ art12inc13 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2402, 0, 0, 0, 0, 0, 0, 0, 0~ $ naf13art14 &lt;dbl&gt; 8037, 0, 14873, 0, 0, 11208, 1218, 3418, 8014, 0, 0, 0, 14~ $ art13act14 &lt;dbl&gt; 0, 0, 4410, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art13hab14 &lt;dbl&gt; 8037, 0, 10108, 0, 0, 10194, 1218, 3418, 8014, 0, 0, 0, 14~ $ art13mix14 &lt;dbl&gt; 0, 0, 354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ art13inc14 &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 0, 1226~ $ naf14art15 &lt;dbl&gt; 0, 975, 29188, 0, 0, 24511, 226, 3065, 0, 0, 7984, 0, 1109~ $ art14act15 &lt;dbl&gt; 0, 0, 691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, ~ $ art14hab15 &lt;dbl&gt; 0, 975, 28497, 0, 0, 24511, 226, 3065, 0, 0, 7598, 0, 1093~ $ art14mix15 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art14inc15 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0, 0, 0, 0, 0, 0, 0,~ $ naf15art16 &lt;dbl&gt; 857, 1749, 94624, 886, 1450, 14000, 2862, 6847, 1317, 0, 1~ $ art15act16 &lt;dbl&gt; 0, 0, 34171, 0, 0, 11601, 0, 0, 0, 0, 0, 0, 80043, 0, 0, 0~ $ art15hab16 &lt;dbl&gt; 857, 1749, 60300, 0, 1450, 2399, 2862, 6847, 1317, 0, 1449~ $ art15mix16 &lt;dbl&gt; 0, 0, 152, 886, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0, 0~ $ art15inc16 &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0~ $ naf16art17 &lt;dbl&gt; 1718, 1205, 45103, 16323, 0, 27673, 8959, 0, 3363, 2090, 0~ $ art16act17 &lt;dbl&gt; 0, 0, 1069, 0, 0, 13351, 0, 0, 0, 0, 0, 0, 1505, 0, 0, 0, ~ $ art16hab17 &lt;dbl&gt; 1718, 1205, 44034, 13831, 0, 12816, 8959, 0, 3363, 2090, 0~ $ art16mix17 &lt;dbl&gt; 0, 0, 0, 2492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art16inc17 &lt;dbl&gt; 0, 0, 0, 0, 0, 1506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ naf17art18 &lt;dbl&gt; 3580, 0, 76493, 3729, 1000, 12508, 1338, 2265, 978, 1781, ~ $ art17act18 &lt;dbl&gt; 0, 0, 36327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art17hab18 &lt;dbl&gt; 3580, 0, 40166, 3729, 1000, 12508, 1338, 2265, 978, 1781, ~ $ art17mix18 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ art17inc18 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5647, 0, 0, 0, 0, 0, 0, 0, 0~ $ naf18art19 &lt;dbl&gt; 2721, 1037, 87831, 0, 3959, 19203, 2550, 1000, 700, 0, 0, ~ $ art18act19 &lt;dbl&gt; 0, 0, 34134, 0, 0, 5757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art18hab19 &lt;dbl&gt; 2721, 600, 53272, 0, 3959, 13446, 2550, 1000, 700, 0, 0, 0~ $ art18mix19 &lt;dbl&gt; 0, 0, 425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ art18inc19 &lt;dbl&gt; 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ naf19art20 &lt;dbl&gt; 0, 1740, 13093, 25621, 0, 22992, 9419, 2020, 1707, 0, 4830~ $ art19act20 &lt;dbl&gt; 0, 0, 4907, 0, 0, 18782, 0, 0, 0, 0, 0, 0, 0, 0, 1850, 0, ~ $ art19hab20 &lt;dbl&gt; 0, 1740, 8157, 25621, 0, 4210, 9419, 2020, 1707, 0, 4830, ~ $ art19mix20 &lt;dbl&gt; 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ $ art19inc20 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ $ nafart0920 &lt;dbl&gt; 34211, 14600, 564660, 70953, 6507, 185341, 34139, 22369, 8~ $ artact0920 &lt;dbl&gt; 0, 0, 223544, 0, 0, 54072, 1419, 0, 14380, 0, 0, 0, 113098~ $ arthab0920 &lt;dbl&gt; 34211, 9783, 324580, 66489, 6507, 124078, 32594, 22369, 53~ $ artmix0920 &lt;dbl&gt; 0, 0, 4284, 4414, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0,~ $ artinc0920 &lt;dbl&gt; 0, 4817, 12252, 50, 0, 7191, 126, 0, 12519, 720, 8435, 0, ~ $ artcom0920 &lt;dbl&gt; 0.22, 0.16, 2.31, 0.44, 0.11, 0.55, 0.66, 0.32, 0.27, 0.09~ $ pop12 &lt;dbl&gt; 777, 235, 14233, 1642, 110, 2437, 739, 338, 1069, 385, 311~ $ pop17 &lt;dbl&gt; 776, 248, 14035, 1689, 111, 2726, 752, 330, 1115, 376, 326~ $ pop1217 &lt;dbl&gt; -1, 13, -198, 47, 1, 289, 13, -8, 46, -9, 15, -16, -73, 23~ $ men12 &lt;dbl&gt; 303, 104, 6013, 614, 51, 979, 306, 140, 428, 148, 140, 68,~ $ men17 &lt;dbl&gt; 315, 107, 6406, 636, 56, 1144, 324, 148, 475, 155, 150, 65~ $ men1217 &lt;dbl&gt; 12, 3, 393, 22, 4, 164, 18, 7, 47, 7, 10, -3, 33, 21, 15, ~ $ emp17 &lt;dbl&gt; 99, 16, 7686, 294, 6, 469, 145, 19, 267, 25, 57, 21, 2136,~ $ emp12 &lt;dbl&gt; 75, 13, 7613, 281, 4, 454, 135, 32, 199, 35, 48, 21, 2134,~ $ emp1217 &lt;dbl&gt; 24, 3, 73, 13, 2, 15, 10, -13, 68, -10, 9, 0, 2, -7, 8, 2,~ $ mepart1217 &lt;dbl&gt; 31.97, 12.23, 23.51, 17.49, 41.38, 21.88, 18.53, -4.10, 56~ $ menhab1217 &lt;dbl&gt; 10.66, 6.11, 25.83, 13.92, 27.59, 30.18, 11.91, 4.78, 22.9~ $ artpop1217 &lt;dbl&gt; -11262.00, 377.38, -1001.08, 425.70, 1450.00, 283.08, 1162~ $ surfcom20 &lt;dbl&gt; 15654745, 9129931, 24488600, 16050565, 6026477, 33592093, ~ Nous voyons quil ny a plus de valeurs NULL : which(flux$surfcom20 == &quot;NULL&quot;) integer(0) "],["traitement-de-la-donnée.html", "Chapitre 3 Traitement de la donnée 3.1 Lecture des données 3.2 Sélection des colonnes 3.3 Transformation du format wide vers long 3.4 Année et destination du flux 3.5 Retraitement 3.6 Fonction getStatsFlux 3.7 Data Engineering", " Chapitre 3 Traitement de la donnée Dans ce notebook, nous allons préparer la donnée, afin dobtenir la donnée transformée escomptée, à savoir un flux dartificialisation par commune et par année. 3.1 Lecture des données Lisons les données de flux library(tidyverse) flux &lt;- read_csv(&quot;data/obs_artif_conso_com_2009_2020_V2.csv&quot;) 3.2 Sélection des colonnes Nous nous intéressons aux flux entre années et allons sélectionner seulement les colonnes utiles, à savoir, les colonnes art09mix10, art10mix11, etc myCols &lt;- names(flux)[grep(&quot;^art[0-9]{2}\\\\S+[0-9]{2}$&quot;, names(flux))] myCols [1] &quot;art09act10&quot; &quot;art09hab10&quot; &quot;art09mix10&quot; &quot;art09inc10&quot; &quot;art10act11&quot; [6] &quot;art10hab11&quot; &quot;art10mix11&quot; &quot;art10inc11&quot; &quot;art11act12&quot; &quot;art11hab12&quot; [11] &quot;art11mix12&quot; &quot;art11inc12&quot; &quot;art12act13&quot; &quot;art12hab13&quot; &quot;art12mix13&quot; [16] &quot;art12inc13&quot; &quot;art13act14&quot; &quot;art13hab14&quot; &quot;art13mix14&quot; &quot;art13inc14&quot; [21] &quot;art14act15&quot; &quot;art14hab15&quot; &quot;art14mix15&quot; &quot;art14inc15&quot; &quot;art15act16&quot; [26] &quot;art15hab16&quot; &quot;art15mix16&quot; &quot;art15inc16&quot; &quot;art16act17&quot; &quot;art16hab17&quot; [31] &quot;art16mix17&quot; &quot;art16inc17&quot; &quot;art17act18&quot; &quot;art17hab18&quot; &quot;art17mix18&quot; [36] &quot;art17inc18&quot; &quot;art18act19&quot; &quot;art18hab19&quot; &quot;art18mix19&quot; &quot;art18inc19&quot; [41] &quot;art19act20&quot; &quot;art19hab20&quot; &quot;art19mix20&quot; &quot;art19inc20&quot; 3.3 Transformation du format wide vers long Nous utiliserons ggplot2 pour représenter les données. Nous aurons besoin, avant dutiliser les données, de passer dun format wide (en largeur) à un format long (en longueur). En effet, les noms de colonnes, comme art19hab20 ou art13mix14 portent en eux des attributs : type de flux, et année du flux, que nous aimerions bien voir apparaître dans les cellules de notre tableau. Par exemple, pour art19hab20, lannée du flux est lannée 2019 et concerne les flux vers lhabitat. On pourrait imaginer avoir une colonne pour lannée du flux, et une colonne pour son type. Pour art13mix14, le flux est concerne les flux dartificialisation vers le mixte pour lannée 2013. Voici la différence entre un fichier de type wide et un fichier de type long : 3.3.1 Wide id nom sport ville 1 mathieu squash Aix-en-Provence 3.3.2 Long id variable valeur 1 nom mathieu 1 sport squash 1 ville Aix-en-Provence Dans notre cas, nous passerions de cette structure : | idcom | art19hab20 | |  |  | | 13001 | 111096 | à cette structure idcom year type value 13001 2019 habitat 111096 3.3.3 Transformation au format long avec gather Prenons lexemple dAix en Provence. Les données sont dans un format wide (le plus commun, avec les variables en colonnes) : df &lt;- flux %&gt;% filter(idcom == &quot;13001&quot;) df[, c(&quot;idcom&quot;, &quot;idcomtxt&quot;, myCols)] # A tibble: 1 x 46 idcom idcomtxt art09act10 art09hab10 art09mix10 art09inc10 art10act11 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 13001 Aix-en-Provence 70439 223015 21156 2502 70440 # ... with 39 more variables: art10hab11 &lt;dbl&gt;, art10mix11 &lt;dbl&gt;, # art10inc11 &lt;dbl&gt;, art11act12 &lt;dbl&gt;, art11hab12 &lt;dbl&gt;, art11mix12 &lt;dbl&gt;, # art11inc12 &lt;dbl&gt;, art12act13 &lt;dbl&gt;, art12hab13 &lt;dbl&gt;, art12mix13 &lt;dbl&gt;, # art12inc13 &lt;dbl&gt;, art13act14 &lt;dbl&gt;, art13hab14 &lt;dbl&gt;, art13mix14 &lt;dbl&gt;, # art13inc14 &lt;dbl&gt;, art14act15 &lt;dbl&gt;, art14hab15 &lt;dbl&gt;, art14mix15 &lt;dbl&gt;, # art14inc15 &lt;dbl&gt;, art15act16 &lt;dbl&gt;, art15hab16 &lt;dbl&gt;, art15mix16 &lt;dbl&gt;, # art15inc16 &lt;dbl&gt;, art16act17 &lt;dbl&gt;, art16hab17 &lt;dbl&gt;, art16mix17 &lt;dbl&gt;, ... Pour transformer au format long, nous utilisons la fonction gather : df &lt;- df[, c(&quot;idcom&quot;, &quot;idcomtxt&quot;, myCols)] df &lt;- gather(df, &quot;variable&quot;, # key &quot;value&quot;, # value myCols) # variables df # A tibble: 44 x 4 idcom idcomtxt variable value &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 13001 Aix-en-Provence art09act10 70439 2 13001 Aix-en-Provence art09hab10 223015 3 13001 Aix-en-Provence art09mix10 21156 4 13001 Aix-en-Provence art09inc10 2502 5 13001 Aix-en-Provence art10act11 70440 6 13001 Aix-en-Provence art10hab11 223016 7 13001 Aix-en-Provence art10mix11 21157 8 13001 Aix-en-Provence art10inc11 2499 9 13001 Aix-en-Provence art11act12 83789 10 13001 Aix-en-Provence art11hab12 343830 # ... with 34 more rows La colonne variable comporte des valeurs telles que art09hab10 pour le flux dartificialisation vers lhabitat de 2009 à 2010 : unique(df$variable) [1] &quot;art09act10&quot; &quot;art09hab10&quot; &quot;art09mix10&quot; &quot;art09inc10&quot; &quot;art10act11&quot; [6] &quot;art10hab11&quot; &quot;art10mix11&quot; &quot;art10inc11&quot; &quot;art11act12&quot; &quot;art11hab12&quot; [11] &quot;art11mix12&quot; &quot;art11inc12&quot; &quot;art12act13&quot; &quot;art12hab13&quot; &quot;art12mix13&quot; [16] &quot;art12inc13&quot; &quot;art13act14&quot; &quot;art13hab14&quot; &quot;art13mix14&quot; &quot;art13inc14&quot; [21] &quot;art14act15&quot; &quot;art14hab15&quot; &quot;art14mix15&quot; &quot;art14inc15&quot; &quot;art15act16&quot; [26] &quot;art15hab16&quot; &quot;art15mix16&quot; &quot;art15inc16&quot; &quot;art16act17&quot; &quot;art16hab17&quot; [31] &quot;art16mix17&quot; &quot;art16inc17&quot; &quot;art17act18&quot; &quot;art17hab18&quot; &quot;art17mix18&quot; [36] &quot;art17inc18&quot; &quot;art18act19&quot; &quot;art18hab19&quot; &quot;art18mix19&quot; &quot;art18inc19&quot; [41] &quot;art19act20&quot; &quot;art19hab20&quot; &quot;art19mix20&quot; &quot;art19inc20&quot; 3.4 Année et destination du flux Nous allons extraire lannée et le type (habitat, activité, mixte, inconnu) depuis le champ variable : df$year &lt;- gsub(&quot;art([0-9]{2})(\\\\S+)[0-9]{2}&quot;, &quot;20\\\\1&quot;, df$variable) df$type &lt;- gsub(&quot;art([0-9]{2})(\\\\S+)[0-9]{2}&quot;, &quot;\\\\2&quot;, df$variable) Voici le résultat: df %&gt;% head # A tibble: 6 x 6 idcom idcomtxt variable value year type &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 13001 Aix-en-Provence art09act10 70439 2009 act 2 13001 Aix-en-Provence art09hab10 223015 2009 hab 3 13001 Aix-en-Provence art09mix10 21156 2009 mix 4 13001 Aix-en-Provence art09inc10 2502 2009 inc 5 13001 Aix-en-Provence art10act11 70440 2010 act 6 13001 Aix-en-Provence art10hab11 223016 2010 hab 3.5 Retraitement Améliorons le champ type pour avoir des libellés plus parlants : df &lt;- df %&gt;% mutate(type = case_when( type == &quot;hab&quot; ~ &quot;Habitat&quot;, type == &quot;act&quot; ~ &quot;Activité&quot;, type == &quot;mix&quot; ~ &quot;Mixte&quot;, type == &quot;inc&quot; ~ &quot;Inconnu&quot;, )) Au final, nous navons plus besoin de la variable variable : df$variable &lt;- NULL Voici notre fichier df au final : df # A tibble: 44 x 5 idcom idcomtxt value year type &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 13001 Aix-en-Provence 70439 2009 Activité 2 13001 Aix-en-Provence 223015 2009 Habitat 3 13001 Aix-en-Provence 21156 2009 Mixte 4 13001 Aix-en-Provence 2502 2009 Inconnu 5 13001 Aix-en-Provence 70440 2010 Activité 6 13001 Aix-en-Provence 223016 2010 Habitat 7 13001 Aix-en-Provence 21157 2010 Mixte 8 13001 Aix-en-Provence 2499 2010 Inconnu 9 13001 Aix-en-Provence 83789 2011 Activité 10 13001 Aix-en-Provence 343830 2011 Habitat # ... with 34 more rows 3.6 Fonction getStatsFlux Créons une fonction qui retourne les flux pour une commune donnée à partir de son code INSEE : getStatsFlux &lt;- function(flux, codeInsee) { # Filtre par commune df &lt;- flux %&gt;% filter(idcom == codeInsee) # Colonnes intéressantes myCols &lt;- names(flux)[grep(&quot;^art[0-9]{2}\\\\S+[0-9]{2}$&quot;, names(flux))] df &lt;- df[, c(&quot;idcom&quot;, &quot;idcomtxt&quot;, myCols)] # Long format df &lt;- df %&gt;% gather(&quot;variable&quot;, # key &quot;value&quot;, # value myCols) # variables # Année et type df$year &lt;- gsub(&quot;art([0-9]{2})(\\\\S+)[0-9]{2}&quot;, &quot;20\\\\1&quot;, df$variable) df$type &lt;- gsub(&quot;art([0-9]{2})(\\\\S+)[0-9]{2}&quot;, &quot;\\\\2&quot;, df$variable) # Renomme les valeurs de type df &lt;- df %&gt;% mutate(type = case_when( type == &quot;hab&quot; ~ &quot;Habitat&quot;, type == &quot;act&quot; ~ &quot;Activité&quot;, type == &quot;mix&quot; ~ &quot;Mixte&quot;, type == &quot;inc&quot; ~ &quot;Inconnu&quot;)) # Réagence les colonnes df &lt;- df[, c(&quot;idcom&quot;, &quot;idcomtxt&quot;, &quot;year&quot;, &quot;type&quot;, &quot;value&quot;)] return(df) } flux %&gt;% getStatsFlux(&quot;13001&quot;) # A tibble: 44 x 5 idcom idcomtxt year type value &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 13001 Aix-en-Provence 2009 Activité 70439 2 13001 Aix-en-Provence 2009 Habitat 223015 3 13001 Aix-en-Provence 2009 Mixte 21156 4 13001 Aix-en-Provence 2009 Inconnu 2502 5 13001 Aix-en-Provence 2010 Activité 70440 6 13001 Aix-en-Provence 2010 Habitat 223016 7 13001 Aix-en-Provence 2010 Mixte 21157 8 13001 Aix-en-Provence 2010 Inconnu 2499 9 13001 Aix-en-Provence 2011 Activité 83789 10 13001 Aix-en-Provence 2011 Habitat 343830 # ... with 34 more rows Enregistrons cette fonction dans le fichier helpers.R 3.7 Data Engineering Pas mal détapes de préparation sont parfois nécessaires avant de créer des applications de dataviz. Voici la chaîne de données, assez conséquente, pour Cartofriches : "],["palette-de-couleurs.html", "Chapitre 4 Palette de couleurs 4.1 Lecture des données avec transformation 4.2 Premier graphique 4.3 Quelques améliorations 4.4 Couleurs HCL (Hue Chroma Luminance) 4.5 Export de la palette 4.6 Une couleur plus punchy 4.7 Couleurs Cerema", " Chapitre 4 Palette de couleurs Dans ce notebook, nous allons réaliser un graphique assez simple avec ggplot. 4.1 Lecture des données avec transformation Lisons les données de flux et rappelons la fonction getStatsFlux : library(tidyverse) flux &lt;- read_csv(&quot;data/obs_artif_conso_com_2009_2020_V2.csv&quot;) Chargeons notre fichier helpers.R qui contient nos fonctions : source(&quot;helpers/helpers.R&quot;, encoding = &quot;UTF-8&quot;) Nous avons notre fonction getStatsFlux pour voir les flux par année, pour une commune donnée : df &lt;- flux %&gt;% getStatsFlux(&quot;13001&quot;) 4.2 Premier graphique Maintenant que nous parvenons à récupérer les stats bien formatées, nous pouvons tenter le graphique des flux dartificialisation sur Aix en Provence : library(ggplot2) p &lt;- ggplot(data = df, aes(x = year, y = value, fill = type)) + geom_bar(stat = &quot;identity&quot;) p Cest vraiment le graphique le plus basique que nous puissions réaliser. 4.3 Quelques améliorations Nous pouvons en changer quelques éléments, améliorer lesthétique : # Ordre des types df$type &lt;- as.character(df$type) df$type &lt;- factor(df$type, levels = c(&quot;Habitat&quot;, &quot;Activité&quot;, &quot;Mixte&quot;, &quot;Inconnu&quot;)) # Plot p &lt;- ggplot(data = df, aes(x = year, y = value, fill = type)) + geom_bar(stat = &quot;identity&quot;) + theme( axis.title.x = element_blank(), # pas de titre pour l&#39;axe X axis.ticks.x = element_blank(), # pas de tirets pour l&#39;axe X axis.text.x = element_text(vjust = 3), # repositionnement des années un peu plus en haut (vu qu&#39;on enlève les tirets) axis.ticks.y = element_blank(), # pas de tirets sur l&#39;axe Y axis.title.y = element_blank(), # pas de titre pour l&#39;axe Y panel.border = element_blank(), # pas de bordure panel.grid.major.x = element_blank(), # pas de lignes verticales panel.grid.minor.x = element_blank(), # pas de &quot;sous&quot;-lignes verticales legend.position = &quot;bottom&quot;, # légende en vas legend.title = element_blank(), # pas de titre pour la légende plot.title = element_text(face = &quot;bold&quot;, size = 10, colour = &quot;grey60&quot;), # titre en gras et en gris legend.text = element_text(size = 8) # taille de texte pour la légende (plus petit) ) + ggtitle(&quot;Flux d&#39;artificialisation par année en Ha&quot;) + scale_y_continuous(expand = c(0, 0)) # réinitialise la marge en x et y vers les coordonnées 0,0 (au plus proche) p Nous avons allégé au maximum le graphique. Nous avons mis la légende en bas pour quelle nécrase pas le graphique Mais les couleurs ne sont pas forcément encore tops !.. 4.4 Couleurs HCL (Hue Chroma Luminance) 4.4.1 A propos Nous utilisons la modélisation de couleurs HCL (pour Hue Chroma Luminance). En HCL, une couleur est définie selon trois paramètres : Hue, qui définit la teinte (bleue, rouge, ) dune couleur Chroma son côté coloré (colourfulness) Luminance sa luminosité 4.4.2 Nos couleurs Nous allons prendre 4 couleurs pour notre palette : Bleue pour lhabitat Rouge pour lactivité (le rouge rappelle lactivité) Magenta pour mixte (un peu un mélange des deux premiers) Gris pour la catégorie Inconnu (gris est une couleur neutre qui symbolise bien linconnu) Par défaut, le chroma sera fixé à 50, la luminosité à 80 (sur une échelle de 0 à 100) : library(colorspace) colorBlue &lt;- hcl(h = 220, c = 50, l = 80, fixup = TRUE) colorRed &lt;- hcl(h = 4, c = 50, l = 80, fixup = TRUE) colorMagenta &lt;- hcl(h = 300, c = 50, l = 80, fixup = TRUE) colorGrey &lt;- hcl(h = 0, c = 0, l = 80, fixup = TRUE) myPalette &lt;- c(&quot;blue&quot; = colorBlue, &quot;red&quot; = colorRed, &quot;magenta&quot; = colorMagenta, &quot;grey&quot; = colorGrey) 4.4.3 Assistants A savoir que la librairie colorspace intègre un assistant pour choisir les couleurs dans un espace HCL : hclcolorpicker Le site de Sciences Po MediaLab propose un assistant vraiment pas mal pour choisir les couleurs HCL. Ce dernier sappelle I Want Hue Testons notre palette : demoplot(myPalette, &quot;bar&quot;) Voici une représentation des couleurs dans lespace HCL : hclplot(myPalette) 4.4.4 Utilisation dans notre graphique Utilisons cette nouvelle palette de couleurs dans notre graphique : p + scale_fill_manual( name = &quot;Flux\\nd&#39;artificialisation\\n2009-2020&quot;, labels = c(&quot;Habitat&quot;, &quot;Activité&quot;, &quot;Mixte&quot;, &quot;Inconnu&quot;), values = as.character(myPalette) ) 4.5 Export de la palette Exportons notre palette de couleurs pour la réutiliser plus tard : saveRDS(myPalette, &quot;myPalette.rds&quot;) 4.6 Une couleur plus punchy Utilisons une couleur plus punchy pour le magenta en mettant un chrom de 100 : p + scale_fill_manual( name = &quot;Flux\\nd&#39;artificialisation\\n2009-2020&quot;, labels = c(&quot;Habitat&quot;, &quot;Activité&quot;, &quot;Mixte&quot;, &quot;Inconnu&quot;), values = c(colorBlue, colorRed, hcl(h = 300, c = 100, l = 80), # Magenta colorGrey) ) 4.7 Couleurs Cerema Nous aurions aussi pu choisir les couleurs de létablissement. Lisons la palette de couleurs Cerema : library(rjson) paletteCerema &lt;- fromJSON(file = &quot;palettes/palette_cerema.json&quot;) paletteCerema $texte [1] &quot;#292574&quot; $principale $principale$vert [1] &quot;#B0CC4E&quot; $principale$jaune [1] &quot;#FDEB7D&quot; $principale$orange [1] &quot;#F49D54&quot; $principale$bleu [1] &quot;#7E97CE&quot; $principale$vert2 [1] &quot;#60B467&quot; $secondaire $secondaire$vert [1] &quot;#96AB5B&quot; $secondaire$jaune [1] &quot;#F7D05C&quot; $secondaire$orange [1] &quot;#EF7757&quot; $secondaire$bleu [1] &quot;#5A71B4&quot; $secondaire$vert2 [1] &quot;#448D60&quot; $complementaire $complementaire$vert [1] &quot;#EBF1D4&quot; $complementaire$jaune [1] &quot;#FEFAE0&quot; $complementaire$orange [1] &quot;#FBE6D6&quot; $complementaire$bleu [1] &quot;#DEE5F1&quot; $complementaire$vert2 [1] &quot;#D8ECDA&quot; Elle est constituée dune couleur pour le texte, pour les couleurs principales, secondaires et complémentaires. Choisissons pour les couleurs des flux dhabitat, dactivité et mixtes des couleurs secondaires de la palette Cerema. Pour les données inconnues, on prend la couleur grise davant : p + scale_fill_manual( name = &quot;Flux\\nd&#39;artificialisation\\n2009-2020&quot;, labels = c(&quot;Habitat&quot;, &quot;Activité&quot;, &quot;Mixte&quot;, &quot;Inconnu&quot;), values = c(paletteCerema$secondaire$bleu, paletteCerema$secondaire$orange, paletteCerema$secondaire$vert, colorGrey) ) "],["streamgraph.html", "Chapitre 5 Streamgraph 5.1 Lecture des données 5.2 Installation de la librairie streamgraph 5.3 Streamgraph 5.4 Fonction makeStream 5.5 Dimensions dune dataviz", " Chapitre 5 Streamgraph Dans ce notebook, ous allons représenter la donnée à laide dun streamgraph. 5.1 Lecture des données Chargeons les librairies, lisons nos données : library(tidyverse) source(&quot;helpers/helpers.R&quot;, encoding = &quot;UTF-8&quot;) flux &lt;- read_csv(&quot;data/obs_artif_conso_com_2009_2020_V2.csv&quot;) Récupérons aussi notre palette de couleurs : myPalette &lt;- readRDS(&quot;palettes/myPalette.rds&quot;) 5.2 Installation de la librairie streamgraph devtools::install_github(&quot;hrbrmstr/streamgraph&quot;) 5.3 Streamgraph Récupérons les données de flux dAix-en-Provence : df &lt;- flux %&gt;% getStatsFlux(&quot;13001&quot;) Réalisons le streamgraph sur Aix-en-Provence : library(streamgraph) # L&#39;ordre des inverse dans les streamgraphs df$type &lt;- factor(df$type, levels = c(&quot;Inconnu&quot;, &quot;Mixte&quot;, &quot;Activité&quot;, &quot;Habitat&quot;)) # Plot df %&gt;% streamgraph(&quot;type&quot;, &quot;value&quot;, &quot;year&quot;, sort = FALSE) %&gt;% sg_axis_x(1, &quot;Année&quot;, &quot;%Y&quot;) %&gt;% sg_fill_manual(rev(myPalette)) factor permet de définir lordre daffichage des entités. Et nous utilisons rev(myPalette) car streamgraph inverse la palette. 5.4 Fonction makeStream Nous pouvons créer une fonction qui retourne le streamgraph de nimporte quelle commune : makeStream &lt;- function(flux, codeInsee) { df &lt;- flux %&gt;% getStatsFlux(codeInsee) # L&#39;ordre des inverse dans les streamgraphs df$type &lt;- factor(df$type, levels = c(&quot;Inconnu&quot;, &quot;Mixte&quot;, &quot;Activité&quot;, &quot;Habitat&quot;)) # Plot df %&gt;% streamgraph(&quot;type&quot;, &quot;value&quot;, &quot;year&quot;, sort = FALSE) %&gt;% sg_axis_x(1, &quot;Année&quot;, &quot;%Y&quot;) %&gt;% sg_fill_manual(rev(myPalette)) } Voici une utilisation de la fonction makeStream sur Marseille : flux %&gt;% makeStream(&quot;13055&quot;) Ou sur Toulon : flux %&gt;% makeStream(&quot;83137&quot;) Cette fonction nous sera bien utile dans lapplication Shiny. 5.5 Dimensions dune dataviz Voici selon moi les dimensions dune dataviz : "],["spatial.html", "Chapitre 6 Spatial 6.1 Librairie sf 6.2 Contours administratifs 6.3 Export 6.4 Coordonnées au clic 6.5 Point 6.6 Commune localisée au clic 6.7 Fonction getCommCenter", " Chapitre 6 Spatial Dans ce notebook, nous allons voir comment intégrer la dimension spatiale (requêtes spatiales), en préparation de la dimension cartographique de lapplication Shiny. 6.1 Librairie sf Chargeons tidyverse, et la librairie sf library(tidyverse) library(sf) 6.2 Contours administratifs Lisons nos données administratives AdminExpress en les reprojetant du Lambert 93 (EPSG:2154) vers le WGS84 (EPSG:4326) : comms &lt;- st_read(&quot;data/COMMUNE_CARTO/COMMUNE_CARTO.shp&quot;) %&gt;% st_set_crs(2154) %&gt;% st_transform(4326) 6.3 Export Exportons les données sur la Région Sud pour un usage ultérieur, dans lapplication Shiny par exemple : saveRDS(comms %&gt;% filter(INSEE_REG == 93), &quot;comms.rds&quot;) comms &lt;- readRDS(&quot;data/comms.rds&quot;) 6.4 Coordonnées au clic Lorsquon cliquera sur la carte dans lappli Shiny, les coordonnées seront retournées à lutilisateur sous cette forme : $lat [1] 43.2829 $lng [1] 6.2507 $.nonce [1] 0.8278805 6.5 Point On crée un point depuis les coordonnées comme ceci : pt &lt;- c(6.2507, 43.2829) %&gt;% st_point %&gt;% st_sfc %&gt;% st_set_crs(4326) 6.6 Commune localisée au clic On intersecte les communes avec le point : i &lt;- st_intersects(comms, pt) On détermine la commune localisée au point : w &lt;- which(sapply(i, function(x) length(x) != 0)) codeInsee &lt;- comms$INSEE_COM[w] 6.7 Fonction getCommCenter On peut en faire une fonction getCommCenter : getCommCenter &lt;- function(comms, coords) { pt &lt;- coords %&gt;% st_point %&gt;% st_sfc %&gt;% st_set_crs(4326) i &lt;- st_intersects(comms, pt) w &lt;- which(sapply(i, function(x) length(x) != 0)) codeInsee &lt;- comms$INSEE_COM[w] return(codeInsee) } Utilisons par exemple la fonction pour trouver la commune qui se situe au point de coordonnées 5.398602, 43.53609 : comms %&gt;% getCommCenter(c(5.398602, 43.53609)) [1] &quot;13001&quot; "],["appli-shiny.html", "Chapitre 7 Appli Shiny 7.1 Préambule 7.2 Dataviz 7.3 Contexte 7.4 Charte 7.5 Contexte 7.6 reactive 7.7 Carto 7.8 reactive 7.9 Refactoring 7.10 Carto 7.11 Refactoring 7.12 Dataviz 7.13 Refactoring 7.14 Contexte", " Chapitre 7 Appli Shiny Cette animation montre lévolution de lapplication depuis le premier commit jusquau dernier. Nous partons dune représentation assez basique (poser les bases) vers lajout progressif déléments dinteraction utilisateur, de représentation de la données, ainsi que déléments contextuels textes. Cette animation montre lévolution de lappli depuis le premier commit jusquau dernier : Le code de lapplication est accessible dans le répertoire github shiny-artif-app. 7.1 Préambule 7.1.1 Template de base Pour créer une application Shiny, il faut, depuis RStudio, aller dans File &gt; New File &gt; Shiny Web App... Cela crée une application basique qui sert dexemple, avec une liste déroulante et un graphique dexemple : library(shiny) ui &lt;- fluidPage( ## Application title titlePanel(&quot;Old Faithful Geyser Data&quot;), ## on changera le nom de l&#39;appli plus tard sidebarLayout( sidebarPanel( &quot;liste&quot; ), mainPanel( &quot;résultats&quot; ) ) ) server &lt;- function(input, output) { ## vide pour le moment } ## Run the application shinyApp(ui = ui, server = server) ui est la partie destinée à accueillir les éléments dinterface (esthétique) server est la partie dans laquelle seront définis les mécanismes dinteraction, dinterrogation et de représentation des données. La partie server réagit aux contrôles (slider, boutons, ) définis dans ui Dans lexemple dapplication de base proposée par RStudio, le plot réagit au nombre de bins (barres) défini par un slider. Ainsi, on a cette interaction : En quelque sorte, par analogie avec un modèle MVC (Modèle Vue Contrôleur), ui concerne la Vue et server le Contrôleur. Dans tous les cas, on a cette modélisation pour les contrôles, sorties dans Shiny : un renderStreamgraph pourra réagir à un input de ui, et sera rendu dans ui sous la forme de streamgraphOutput un renderText aura son pendant textOutput etc Ce sont les mêmes conventions qui sont utilisées. On a des inputs, des fonctions render, et des outputs  Voir cette version (006bc70d801a290ef1771b69cd2ded14e0b12516) 7.1.2 Poser les bases Dans un premier temps, on pose les bases, et on efface certains éléments de lapplication dexemple.  Voir cette version (414c6942ce44edd411e256ab0295bb50de2fa059) server.R La partie est laissée vide pour le moment : server &lt;- function(input, output) { ## vide } 7.1.3 Lecture des données et liste déroulante des communes On lit les données de flux : flux &lt;- read_csv(&quot;data/obs_artif_conso_com_2009_2020_V2.csv&quot;, na = c(&quot;&quot;, &quot;NULL&quot;)) %&gt;% filter(idreg == &quot;93&quot;) Ainsi que les données communales : ## Contours de communes comms &lt;&lt;- readRDS(&quot;data/comms.rds&quot;) %&gt;% filter(INSEE_REG == 93) ## Liste communes communes &lt;- flux$idcom names(communes) &lt;- glue(&quot;{flux$idcomtxt} ({flux$idcom})&quot;) ui.R On ajoute la liste déroulante des communes maintenant quelles ont été lues : sidebarLayout( sidebarPanel( selectInput(&quot;communes&quot;, label = NULL, choices = communes, selected = NULL), ), mainPanel( &quot;Résultats&quot; ) )  Voir cette version (9c271b706e34afff002b6e6d5df7ef895af1907e) 7.1.4 Affiche un tableau des résultats On peut afficher un tableau des résultats de flux pour une commune sélectionnée, juste pour tester les mécanismes de sélection, notamment la fonction getStatsFlux vue dans un précédent notebook. ui.R mainPanel( dataTableOutput(&quot;tbResults&quot;) ) server.R On ajoute les résultats avec renderDataTable et dataTableOutput : output$tbResults &lt;- renderDataTable({ codeInsee &lt;- input$communes df &lt;- flux %&gt;% getStatsFlux(codeInsee) return(df) })  Voir cette version (64c7a25268157cf832c9b57dc71b7dfffd663d9e) 7.2 Dataviz 7.2.1 Ajoute le stream On ajoute le streamgraph. ui.R mainPanel( streamgraphOutput(&quot;streamPlot&quot;) ) server.R output$streamPlot &lt;- renderStreamgraph({ myStream &lt;- flux %&gt;% makeStream(codeInsee) return(myStream) })  Voir cette version (a402e8385afcf0c350ac0841037a69383e85eace) 7.3 Contexte 7.3.1 Ajoute les infos communales On peut ajouter des informations assez sommaires sur la commune sélectionnée, sous la forme de texte. ui.R mainPanel( textOutput(&quot;txtCommune&quot;), streamgraphOutput(&quot;streamPlot&quot;) ) server.R output$txtCommune &lt;- renderText({ codeInsee &lt;- input$communes fComm &lt;- flux %&gt;% filter(idcom == codeInsee) paste(fComm$idcomtxt, fComm$idcom, fComm$artcom0920) })  Voir cette version (602a3ea312be829aca7146e5563c001cdd33e823) 7.3.2 Ajoute la légende server.R Pour la légende, on utilise simplement de lHTML stylisé, plutôt que la légende du plot. tagList( div( myStream, style=&quot;margin-bottom:20px;&quot; ), div( tags$span(&quot;Habitat&quot;, style = glue(&quot;background-color:{myPalette[&#39;blue&#39;]};padding:10px;&quot;)), tags$span(&quot;Activité&quot;, style = glue(&quot;background-color:{myPalette[&#39;red&#39;]};padding:10px;&quot;)), tags$span(&quot;Mixte&quot;, style = glue(&quot;background-color:{myPalette[&#39;magenta&#39;]};padding:10px;&quot;)), tags$span(&quot;Inconnu&quot;, style = glue(&quot;background-color:{myPalette[&#39;grey&#39;]};padding:10px;&quot;)), style=&quot;text-align:center&quot; ) ) On peut faire du HTML assez avancé avec R Shiny !  Voir cette version (9c2ab647d7d7376fa84ee19b3239822260933d77) 7.4 Charte 7.4.1 Titre avec couleurs cerema Ici, on intègre un élément de charte graphique Cerema, notamment la palette graphique de létablissement au format JSON.  Voir cette version (c1868418f645a374a8bfda9a3fb11bc0d72a18ec) 7.5 Contexte 7.5.1 Ajoute la surface artificialisée totale On ajoute une nouvelle information en texte.  Voir cette version (9c6f9bed953ea15b948fa371a1d988df5acd27ee) 7.6 reactive 7.6.1 Ajout de reactive fComm Les variables de type reactive sont très utiles lorsquil sagit de récupérer à plusieurs endroits le résultat dune variable calculée car cela évite, entre autres, de devoir répliquer les mécanismes de création de cette variable à ces multiples endroits. Aussi, un mécanisme interne permet de ne pas recalculer la variable si elle na pas changé avec les nouveaux critères de création. server.R fComm &lt;- reactive({ fComm &lt;- flux %&gt;% filter(idcom == input$communes) return(fComm) }) On peut récupérer les variables comme ceci : fComm()$artcom0920 fComm()$nafart0920  Voir cette version (739307b7430ab0d52f3c241fd16d4404c80c927b) 7.7 Carto 7.7.1 Ajoute la carte leaflet ui.R leafletOutput(&quot;mymap&quot;) server.R output$mymap &lt;- renderLeaflet({ leaflet() %&gt;% addTiles(group = &quot;OSM&quot;) })  Voir cette version (5e5be7cf03e9ad4d145c292477d958af00f76904) 7.7.2 Centre la carte sur PACA server.R Pour ajuster la carte sur PACA, on utile la fonction fitBounds. output$mymap &lt;- renderLeaflet({ bb &lt;- st_bbox(comms) %&gt;% as.numeric leaflet() %&gt;% addTiles(group = &quot;OSM&quot;) %&gt;% fitBounds(lng1 = bb[1], lat1 = bb[2], lng2 = bb[3], lat2 = bb[4]) })  Voir cette version (593b2972d14ee8f0f044fb43b2abc41932c4b1ab) 7.7.3 Ajoute les fonds de carte Ajoutons davantage de fonds cartos, notamment ceux de lIGN : orthophoto, Plan IGN. server.R output$mymap &lt;- renderLeaflet({ leaflet() %&gt;% addTiles(group = &quot;OSM&quot;) %&gt;% addProviderTiles(providers$CartoDB.PositronOnlyLabels, group = &quot;Villes&quot;) %&gt;% addTiles(&quot;http://wxs.ign.fr/choisirgeoportail/wmts?REQUEST=GetTile&amp;SERVICE=WMTS&amp;VERSION=1.0.0&amp;STYLE=normal&amp;TILEMATRIXSET=PM&amp;FORMAT=image/png&amp;LAYER=GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2&amp;TILEMATRIX={z}&amp;TILEROW={y}&amp;TILECOL={x}&quot;, options = c(WMSTileOptions(tileSize = 256), providerTileOptions(minZoom = 1, maxZoom = 15)), attribution=&#39;&lt;a target=&quot;_blank&quot; href=&quot;https://www.geoportail.gouv.fr/&quot;&gt;Geoportail France&lt;/a&gt;&#39;, group = &quot;Plan IGN&quot; ) %&gt;% addTiles(&quot;http://wxs.ign.fr/choisirgeoportail/wmts?REQUEST=GetTile&amp;SERVICE=WMTS&amp;VERSION=1.0.0&amp;STYLE=normal&amp;TILEMATRIXSET=PM&amp;FORMAT=image/jpeg&amp;LAYER=ORTHOIMAGERY.ORTHOPHOTOS&amp;TILEMATRIX={z}&amp;TILEROW={y}&amp;TILECOL={x}&quot;, options = c(WMSTileOptions(tileSize = 256), providerTileOptions(minZoom = 1, maxZoom = 22)), attribution=&#39;&lt;a target=&quot;_blank&quot; href=&quot;https://www.geoportail.gouv.fr/&quot;&gt;Geoportail France&lt;/a&gt;&#39;, group = &quot;Photo aérienne&quot; ) %&gt;% addLayersControl(baseGroups = c(&quot;Photo aérienne&quot;, &quot;Plan IGN&quot;, &quot;OSM&quot;), overlayGroups = &quot;Villes&quot;, options = layersControlOptions(collapsed = FALSE)) %&gt;% fitBounds(lng1 = bb[1], lat1 = bb[2], lng2 = bb[3], lat2 = bb[4]) })  Voir cette version (fb67dcc4b87bc13a8cb81847be5c4d5aee1e2b95) 7.7.4 Coordonnées au clic Pour trouver les coordonnées au clic, on utile un mécanisme de sélection basé sur input, notamment input$mymap. A noter que lon peut aussi réagir au clic sur une entité (input$mymap_shape_click), voire au passage (input$mymap_shape_mouseover). Voir à ce titre la page dédiée sur R Leaflet. ui.R verbatimTextOutput(&quot;foo&quot;) server.R output$foo &lt;- renderPrint({ input$mymap_click })  Voir cette version (a9fd41bd65be309d9a5c9e37835bad164ee9b37c) 7.8 reactive 7.8.1 Rend codeInsee reactive Le code INSEE est récupéré dynamiquement après un clic sur la carte. On rend le code INSEE reactive car il sera utilisé à plusieurs endroits : ici ou encore là  Voir cette version (4ac477bd273eaf5db7b0511764c9555182ef423e) 7.8.2 Ajoute le reactive On peut créer des reactive en cascade, comme ici, pour fComm() qui sappuie sur codeInsee() server.R fComm &lt;- reactive({ fComm &lt;- flux %&gt;% filter(idcom == input$communes) fComm &lt;- flux %&gt;% filter(idcom == codeInsee()) return(fComm) }) Pour le streamgraph, on utilise codeInsee() comme ceci : myStream &lt;- flux %&gt;% makeStream(codeInsee())  Voir la ligne de code  Voir cette version (f3d3ffb842c07aaa67a9e4c48b922e8b4fa858dc) 7.9 Refactoring 7.9.1 Fix : ajoute req Quand les données ne sont pas encore chargées, on peut avoir un rendu bizarre avec un message derreur. Du coup, on introduit la fonction req (pour requiert) qui exécute la suite seulement si la condition est réalisée : fComm &lt;- reactive({ req(codeInsee()) ## &lt; ici fComm &lt;- flux %&gt;% filter(idcom == codeInsee()) return(fComm) })  Voir cette version (115ac4ea9c236d74fcbfd1cb2d48d3ae6309b063) 7.10 Carto 7.10.1 Ajoute un marqueur On crée un proxy à la carte pour réaliser plus tard des actions sur celle-ci (zoomer, ajouter des éléments cartos) sans avoir à recalculer la carte (appelée mymap) à chaque fois : proxy &lt;- leafletProxy(&quot;mymap&quot;) On ajoute le centroïde de la commune cliquée : observe({ req(codeInsee()) myComm &lt;- comms %&gt;% filter(INSEE_COM == codeInsee()) ## Ajout du marqueur proxy %&gt;% clearMarkers() %&gt;% addMarkers(data = myComm %&gt;% st_centroid) })  Voir cette version (5821ff9c63199ec0bae647a5874f2080bb9d3d5a) 7.10.2 Ajoute le contour de la commune On ajoute le contour de la commune (cest plus sympa) : proxy %&gt;% clearShapes() %&gt;% addPolygons(data = myComm, color = paletteCerema$secondaire$orange, weight = 1, smoothFactor = 0.5, opacity = 1, fillOpacity = 0.3, fillColor = paletteCerema$secondaire$orange, highlightOptions = highlightOptions(color = paletteCerema$secondaire$orange, weight = 2, fillOpacity = 0.1, bringToFront = TRUE))  Voir cette version (9b4455e5213c849edcdad0a9d2f905f377f2f84a) 7.10.3 Va vers la commune Le marqueur saffiche, le contour aussi, mais parfois la commune semble loin, lo i n, l o i n Du coup, petite astuce ergonomique : au clic, on va automatiquement vers la commune cliquée : bb &lt;- st_bbox(myComm) proxy %&gt;% flyToBounds(lng1 = as.numeric(bb$xmin), lat1 = as.numeric(bb$ymin), lng2 = as.numeric(bb$xmax), lat2 = as.numeric(bb$ymax))  Voir cette version (404f64ab1fbd9fe00dd9da0634faf407007278b5) 7.10.4 La liste déroulante permet daller vers une commune On peut même changer le comportement de la liste déroulante utilisée au début pour afficher les stats (voir cette ligne) pour aller automatiquement vers la commune cliquée : observeEvent(input$communes, { codeInsee &lt;- input$communes bb &lt;- comms %&gt;% filter(INSEE_COM == codeInsee) %&gt;% st_bbox %&gt;% as.numeric proxy %&gt;% flyToBounds(lng1 = bb[1], lat1 = bb[2], lng2 = bb[3], lat2 = bb[4]) }) Cest aussi loccasion dintroduire observeEvent qui écoute les évènements, et qui, ici déclenche une action lorsquon choisit un élément dans la liste des communes (input$communes)  Voir cette version (d295c184cd8801dfdcc4befb414d98ea8c0d4ea9) 7.10.5 Ajoute lélément vide à la liste des communes Généralement, le premier élément dune liste est une instruction type Veuillez choisir une commune  Voir cette version (4e5c6628148bb98841d8468d10dea8a69b2e5c6d) 7.11 Refactoring 7.11.1 Précise quil faut cliquer sur la carte pour afficher les stats Au lieu dutiliser req (voir ce commit) qui conditionne laffichage à la sélection dune commune, nous pouvons générer un message pour préciser quil faut cliquer sur la carte lorsquaucune commune na été cliquée. Si aucune commune nest sélectionnée : valeur nulle, alors on affiche ce message (Voir la ligne de code) : if(is.null(codeInsee())) return(tagList(icon(&quot;mouse-pointer&quot;), &quot;Cliquez sur la carte pour afficher les statistiques&quot;))  Voir cette version (56fd55bfa4cc066af658f7c779398c95c8276275) 7.12 Dataviz 7.12.1 Ajoute la treemap et supprime la légende Tiens, comme on y est, pourquoi pas ajouter une treemap. ui.R plotlyOutput(&quot;treemap&quot;) server.R output$treemap &lt;- renderPlotly({ req(codeInsee()) flux %&gt;% makeTreemap(codeInsee()) })  Voir cette version (1edc95aebfe35df74ca77370b78dc1d0402157a6) 7.13 Refactoring 7.13.1 Sépare en ui.R, server.R et global.R Lorsque le code dune application devient conséquent, cela peut être utile, plutôt que dutiliser un unique fichier app.R, de séparer le contenu dans trois fichiers : ui.R, server.R et global.R ui.R comprend les éléments dinterface auparavant contenus dans ui &lt;- fluidPage({...}) server.R comprend la logique applicative et fonctionnelle de lapplication : mécanismes dinterrogation et de représentation des données, auparavant contenue dans server &lt;- function(input, output) {...} global.R comprend les variables utilisées dans lapplication. 7.13.2 Au sujet de global.R Les variables contenues dans global.R deviennent automatiquement globales. Il ny a alors plus besoin dutiliser la double flèche dassignation des variables globales dans global.R server.R Précédemment, on avait ceci dans server.R : `monNom &lt;&lt;- &quot;Mathieu&quot; 7.13.3 global.R Dans global.R, la variable devient automatiquement globale même avec une assignation simple : `monNom &lt;- &quot;Mathieu&quot;`  Voir cette version (81991cf6ba1a4abef9df951bcdcc1858d97b6815) 7.13.4 Ajoute un fichier helpers.R On peut créer un fichier annexe appelé helpers.R (nous aurions également pu lappeler functions.R) dans lequel stocker les différentes stockées utilisées auparavant dans server.R Cela a le mérite de rendre le code du fichier server.R plus léger, plus lisible car mettant en évidence les mécanismes de façon macro plutôt que micro avec le détail de leur fonctionnement interne. Nous faisons appel au fichier helpers.R au sein de global.R 7.13.5 global.R source(&quot;helpers.R&quot;, encoding = &quot;UTF-8&quot;)  Voir cette version (b6a508c9db407cdc98969b50b80867554978796c) 7.14 Contexte On ajoute un fichier footer.md qui explique doù vient lapplication, donne les sources. On lintègre avec la fonction includeMarkdown tags$div( includeMarkdown(&quot;footer.md&quot;), style=&quot;font-size:0.8em&quot;)  Voir cette version "],["réflexions.html", "Chapitre 8 Réflexions 8.1 Data centric 8.2 Les étapes de développement dune dataviz 8.3 Dimensions dune dataviz", " Chapitre 8 Réflexions 8.1 Data centric Comme nous venons de le voir, le développement de lapplication Shiny se concentre avant sur la donnée, si bien quune application Shiny peut tout à fait être développée sans connaissance du HTML, ou du CSS (bien que leur connaissance soit un pré-requis pour lesthétisation du site). Le contenu, à savoir la donnée, occupe une place centrale, et le développement du contenant, son habillage peuvent être opérés a posteriori. Le développement peut être réalisé par un statisticien. Un ergonome peut ensuite définir le UX Design, à savoir le design de linterface et de ses interactions. Enfin, un graphiste peut venir habiller le site dune certaine charte graphique. 8.2 Les étapes de développement dune dataviz Comme nous lavons vu dans les notebooks 1 à 7, beaucoup de préparation est nécessaire avant daboutir à lapplication : préparation des données, voire aussi préparation des mécanismes (fonctions) dinterrogation des données ou de représentation de celles-ci. Le développement de cette dataviz a suivi ces différentes étapes : 8.2.1 Collecte Bien sûr, on ne peut pas représenter des choses qui nexistent pas, doù limportance de la collecte, et de la stabilité du point daccès à la donnée, notamment lorsque votre dataviz doit être mise à jour régulièrement. 8.2.2 Qualité Une dataviz faite sur des données posant des soucis de qualité produira des graphiques de mauvaise qualité. 8.2.3 Sémiologie Une certaine sémiologie graphique et rigueur doit être suivie afin de restituer de manière convenable linformation à lutilisateur. 8.2.4 Expérience utilisateur Lexpérience utilisateur doit être prise en compte lors du développement, que ce soit dans la manipulation de linterface ou la lecture des graphiques. 8.2.5 Fonctionnalité Rendre fonctionnel et généralisable les mécanismes sous la forme de fonctions permet déjà de rendre le code plus parlant, plus léger à la lecture, plus pérenne et appropriable par une tierce personne, mais aussi de les utiliser ailleurs, dans dautres applis. 8.2.6 Esthétique Pas mal de temps peut être passé dans lesthétique. Le respect dune charte graphique, lesthétisation est souvent le premier désir de celui qui vous demandera une application de dataviz. 8.2.7 Refactoring Enfin, le refactoring vise à améliorer les commentaires dans le code, réorganiser certaines fonctions, certains blocs de code pour faciliter la lecture et la pérénnité du code informatique, son appropriation par dautres, ou par vous-même (lorsque le vent vous aura mené entre temps vers de multiples applis et que vous laurez un peu oubliée !) 8.3 Dimensions dune dataviz Voici selon moi les dimensions dune dataviz : Dans les cas 1 et 2, linformation est intéressante, de valeur. Dans le premier cas (cas 1), oin sattache davantage à laccessibilité de la dataviz, le fait quelle puisse être lue et interprétée facilement, alors que le second cas est celui dune dataviz sophistiquée dans sa manière de rendre, et sans doute créative, mais qui ne mise pas vraiment sur laccessibilité de la représentation. Le second cas est souvent privilégié par ceux qui sintéressent aux représentations abstraites et artistiques réalisées avec de la donnée, à savoir celles réalisées par des data artists, comme on serait tentés de les appeler. La première stratégie est sans doute celle à adopter par dinstitutions publiques, car privilégiant la transmission et lintelligibilité des informations à diffuser. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
